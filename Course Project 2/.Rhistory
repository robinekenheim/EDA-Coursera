table(Surrender$Outcome.Type=="Return to Owner")
data <- AnimalData
Surrender <- data$Intake.Type=="Owner Surrender"
Surrender1 <- data[Surrender,]
table(Surrender$Outcome.Type=="Return to Owner")
Surrender1
View(Surrender1)
View(Surrender1$Outcome.Type=="Return to Owner")
View(Surrender1$Outcome.Type=="Return to Owner",)
View(Surrender1)
Surrender2 <- data$Outcome.Type=="Return to Owner"
View(Surrender1[Surrender2])
View(Surrender1[Surrender2],)
View(Surrender1[Surrender2,])
Surrender2 <- data$Outcome.Type=="Return to Owner"
View(Surrender1[!Surrender2,])
rm(list=ls())
data <- AnimalData
cat <- data$Animal.Type == "Cat"
dog <- data$Animal.Type == "Dog"
data$Intake.Type=="Owner Surrender"
surrender <-data$Intake.Type=="Owner Surrender"
data2 <- data[surrender,]
return <- data$Outcome.Type=="Return to Owner"
data3 < data[return,]
data3 <- data[return,]
data3[dog]
data3[dog,]
View(data2[data3,])
View(data3[data2,])
View(data3)
View(data3[data2])
View(data3[data2,])
data[return,]
data[return,][surrender,]
View(data[return,][surrender,])
rm(list=ls())
library(SDSFoundations)
data <- AnimalData
cat <- data$Animal.Type == "Cat"
dog <- data$Animal.Type == "Dog"
surrender <- data$Intake.Type=="Owner Surrender"
table(surrender)
dataSurrender <- data[surrender,]
return <- data$Outcome.Type=="Return to Owner"
table(return)
View(dataSurrender[return])
View(dataSurrender[return],)
View(dataSurrender[!return,])
View(dataSurrender[return,])
View(dataSurrender[return,])
View(data[return,])
dataReturn <-(data[return,])
View(dataReturn[surrender,])
View(dataReturn[!surrender,])
data
rm(list=ls())
library(SDSFoundations)
data <- AnimalData
cat <- data$Animal.Type == "Cat"
dog <- data$Animal.Type == "Dog"
data <- data$Intake.Type=="Owner Surrender"
data <- AnimalData
dataTemp <- data$Intake.Type=="Owner Surrender"
data <- data[dataTemp,]
dataTemp <- data$Outcome.Type=="Return to Owner"
data <- data[dataTemp,]
View(data)
dataTemp <- data[dog]
data <- data[dog,]
data <- AnimalData
rm(list=ls())
data <- AnimalData
dataTemp <- data$Outcome.Type=="Return to Owner"
data <- data[dataTemp,]
dataTemp <- data$Intake.Type=="Owner Surrender"
data <- data[dataTemp,]
dataTemp <- data$Animal.Type=="Dog"
data <- data[dataTemp,]
View(Data)
View(data)
mean(data$Days.Shelter)
edx <- c(0.2,0.2,0.15,0,15,0.15,10,5)
hist(edx)
hist(edx, break=10)
plot(edx)
fivenum(edx)
summary(edx)
IQR(10)
edx <- c(2,2,3,B)
edx <- c(2,2,3,"B")
edx <- c(2,2,3,"B",6,9,"D",15,18)
IQR(edx)
?IQR
x-mean
1.5*1.1
6.7-1.65
1-pnorm(6.5)
1-pnorm()
?pnorm
1-pnorm(6.7,4.5,1.1)
1-pnorm(4.5,6.7,1.1)
1-pnorm(5.38, 6.7, 1.1)
1-pnorm(8.79,6.7,1.1)
1-pnorm(5.38:8.79,6.7,1.1)
0.8849303+0.6144396+0.2682277+0.0633466
lab
time = c(30,45,180,95,130,140,30,80,60,110,0,80)
grade = c(74,68,87,90,94,84,92,88,82,93,65,90)
results <- data.frame(time, grade)
View(results)
plot(results)
plot(results$time, results$grade)
plot(results)
plot(results$time, results$grade)
plot(results)
plot(results)
abline(lm(results$grade, results$time))
plot(results$time, results$grade)
abline(lm(results$grade, results$time))
plot(results)
abline(lm(results$grade~results$time))
lm(formula = results$grade~results$time)
y <- mx + b
b <- 74,770
b <- 74.770
m <- 0.1119
for (i in 1:nrow(results) ) {
results$deltaY <- results$grade - (results$time * m + b)
}
results$deltaY
results
results
lDeltaY = max(results$deltaY)
outlier <- which(results$deltaY == lDeltaY)
results[outlier,]
results[-7,]
cor(results[-7,])
lm(formula = results$grade~results$time)
install.packages(c("Amelia", "BH", "car", "caret", "catdata", "diptest", "effects", "emdbook", "GPArotation", "Hmisc", "knitr", "lokern", "magrittr", "mvtnorm", "optimx", "ordinal", "party", "plotmo", "rgl", "robustbase", "setRNG", "TH.data"))
68 / (68+109)
round(68 / (68+109), 1)
round(109 / (68+109), 1)
round(109 / (89+109), 1)
round(94+89 / (89+109+68+94), 1)
94+89
68+94+109+89
183/360
68+109
68/177
round(68/177,1)
round(68/177)
round(68/177,10)
round(109/(89+109),10)
183/360
43+583+626
17+8+35+53
113/513
17/52
17+8
17/25
17/43
52+61
113/626
43/626
rond(43/626, 3)
round(43/626, 3)
40+22+19
22/81
round( 0.2716049,3)
45+10+12
round(81/(67+81),3)
40+45+22+10+19
22+10
round(32/136,3)
40+22+19
45+10+12
81+67
round(32/148,3)
81
67/(81+67)
10/(45+10+12)
10/(45+10+12)
67/(81+67)
0.1492537*0.4527027
round(0.1492537*0.4527027,3)
(67/(81+67))*(10/(45+10+12))
round(0.06756757)
round(0.06756757,3)
40/(40+22+19)
round(0.4938272,3 )
40/85
round(0.4705882,3)
85/(85+32+31)
round(0.5743243,3)
45/62
round(0.7258065,3)
45/(45+10+12)
round(0.6716418,3)
45+67
85/(40+45+22+10+19+12)
round(0.5743243,3)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(qplot)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages(c("deldir", "Ecfun", "gplots", "jsonlite", "multcomp", "plotmo", "RcppArmadillo", "RCurl", "Rmpfr", "rrcov"))
45/(45+10+12)
round(0.6716418,3)
45+10+12
40+22+19
67/81
0.8271605*0.6716418
round(0.5555556,3)
40+45
85/(85+22+19+10+12)
(85+22+19+10+12)
85/148
67/81+67
67/(81+67)
0.5743243*0.4527027
round(0.2599982,3)
red <- 85/(85+32+21)
red <- 85/(85+32+21)
red <- 85/(85+32+21)
unmarried <- (45+10+12)/(40+22+19)
red * unmarried
round(0.5094829,3)
45/(45+10+12)
round(0.6716418,3)
unmarried
unmarried <- (45+10+12)/(40+22+19)
unmarried
45+10+12
40+22+19
unmarried <- (45+10+12)/(40+22+19+45+10+12)
unmarried
red*unmarried
round(0.2788386,3)
unmarried <- (45+10+12)/(40+22+19+45+10+12)
red*unmarried
round(0.2788386,3)
red <- 85/(85+32+21)
RED
red
85/(85+22+10+19+12)
red <- 85/(85+22+10+19+12)
red * unmarried
round(0.2599982,3)
40+22+19
unmarried <- (67)/(81+67)
unmarried
red*unmarried
round(unmarried,3)
red
unmarried
red*unmarried
library(SDSFoundations)
acl <- AustinCityLimits
View(acl)
head(acl,10)
View(head(acl,10))
View(head(acl[,acl$Grammy=="Y"],10))
View(head(acl[,acl$Grammy="Y"],10))
View(head(acl[acl$Grammy=="Y",],10))
View(acl[acl$Age>=60,])
genre <- table(acl$Genre)
genre
gender <- table(acl$Gender)
gender
# Create contingency table
twoway <- table (acl$Gender,acl$Genre)
twoway
# Visualize the counts
barplot(twoway, legend=T, beside=T)
# Calculate P(A): the probability of each genre being played
prop.table(genre)
# Calculate P(A|B): the probability of each genre being played, given the artistâ€™s gender
prop.table(twoway,1)
gender <- table(acl$Gender)
gender
barplot(twoway, legend=TRUE, beside=TRUE)
prop.table(genre)
prop.table(twoway,1)
prop.table(twoway,2)
twoway
prop.table(twoway,5)
prop.table(twoway,4)
prop.table(twoway,3)
prop.table(twoway,2)
prop.table(twoway,1)
table(acl$Gender)
table(acl$Gender=="Jazz/Blues")
table(acl$Genre=="Jazz/Blues")
Vieww(,acl$Genre=="Jazz/Blues")
View(,acl$Genre=="Jazz/Blues")
View(acl[acl$Genre=="Jazz/Blues",])
jazz <- (acl[acl$Genre=="Jazz/Blues",])
table(jazz)
prop.table(twoway,1)
prop.table(genre)
prop.table(genre)
prop.table(twoway,1)
7/13
table(acl$Gender)
prop.table(twoway,1)
View(acl[acl$Genre=="Rock/Folk/Indie",])
prop.table(genre)
prop.table(genre)
prop.table(twoway,1)
prop.table(genre)
acl <- AustinCityLimits
rm(list=ls())
setwd("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Exploratory Data Analysis/Course Project 2")
# Read Data into R:
data <- readRDS("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Data Folder/summarySCC_PM25.rds")
class <- readRDS("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Data Folder/Source_Classification_Code.rds")
# Sample:
dataSample = tapply(data$Emissions, data$year, sum)
# create barplot
png(filename='plot1.png', width=480, height = 480)
barplot(dataSample,
main = 'Total Emissions by Year',
ylab = 'PM Emitted (tons)',
xlab = 'Year',
col = topo.colors(4))
dev.off()
motor = c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
# get SCC numbers for motor sources
uniqeClass = unique(SCC$SCC[SCC$EI.Sector %in% motor])
# Baltimore City, Maryland
uniqeClass = unique(class$SCC[class$EI.Sector %in% motor])
# Baltimore City, Maryland
# Los Angeles County, California
motorData = data[data$SCC %in% uniqeClass & data$fips %in% c('24510', '06037'), ]
# get cumulative sum of motor vehicle emissions by year and fips
sumCars = motorData %.%
group_by(year, fips) %.%
summarize(emissions = sum(Emissions))
# create label
sumCars$location = ifelse(sumCars$fips == '24510', 'Baltimore City', 'LA County')
sumCars$location = ifelse(sumCars$fips == '24510', 'Baltimore City', 'LA County')
motor <- c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
motorData <- data[data$SCC %in% uniqeClass & data$fips %in% c('24510', '06037'), ]
sumCars <- motorData %.%
group_by(year, fips) %.%
summarize(emissions = sum(Emissions))
# create label
sumCars$location = ifelse(sumCars$fips == '24510', 'Baltimore City', 'LA County')
require(dplyr)
rm(list=ls())
setwd("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Exploratory Data Analysis/Course Project 2")
# Read Data into R:
data <- readRDS("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Data Folder/summarySCC_PM25.rds")
SCC <- readRDS("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Data Folder/Source_Classification_Code.rds")
motor = c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
# get SCC numbers for motor sources
uniqSCC = unique(SCC$SCC[SCC$EI.Sector %in% motor])
# filter data to only include motor vehicle sources in Baltimore City and LA
motorData = data[data$SCC %in% uniqSCC & data$fips %in% c('24510', '06037'), ]
# get cumulative sum of motor vehicle emissions by year and fips
totals = motorData %.%
group_by(year, fips) %.%
summarize(emissions = sum(Emissions))
# create png
# create label
png(filename = 'plot6.png', width=800, height = 600)
# create plot
ggplot(totals, aes(x = factor(year), y = emissions, fill = location)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_smooth(method = 'lm', se = FALSE, aes(group = location, color = location)) +
xlab('year') + ylab('PM Emissions (tons)')
dev.off()
totals$location = ifelse(totals$fips == '24510', 'Baltimore City', 'LA County')
theme_bw() +
'Mobile - On-Road Diesel Heavy Duty Vehicles')
ggtitle('Motor vehicle emissions - Baltimore City vs. LA County \n1999-2008') +
motor = c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
# get SCC numbers for motor sources
uniqSCC = unique(SCC$SCC[SCC$EI.Sector %in% motor])
# filter data to only include motor vehicle sources in Baltimore City and LA
motorData = data[data$SCC %in% uniqSCC & data$fips %in% c('24510', '06037'), ]
# get cumulative sum of motor vehicle emissions by year and fips
totals = motorData %.%
group_by(year, fips) %.%
summarize(emissions = sum(Emissions))
# create label
totals$location = ifelse(totals$fips == '24510', 'Baltimore City', 'LA County')
# create png
png(filename = 'plot6.png', width=800, height = 600)
# create plot
ggplot(totals, aes(x = factor(year), y = emissions, fill = location)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_smooth(method = 'lm', se = FALSE, aes(group = location, color = location)) +
theme_bw() +
ggtitle('Motor vehicle emissions - Baltimore City vs. LA County \n1999-2008') +
xlab('year') + ylab('PM Emissions (tons)')
dev.off()
library(ggplot2)
library(dplyr)
motor = c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
# get SCC numbers for motor sources
uniqSCC = unique(SCC$SCC[SCC$EI.Sector %in% motor])
# filter data to only include motor vehicle sources in Baltimore City and LA
motorData = data[data$SCC %in% uniqSCC & data$fips %in% c('24510', '06037'), ]
# get cumulative sum of motor vehicle emissions by year and fips
totals = motorData %.%
group_by(year, fips) %.%
summarize(emissions = sum(Emissions))
# create label
totals$location = ifelse(totals$fips == '24510', 'Baltimore City', 'LA County')
# create png
png(filename = 'plot6.png', width=800, height = 600)
# create plot
ggplot(totals, aes(x = factor(year), y = emissions, fill = location)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_smooth(method = 'lm', se = FALSE, aes(group = location, color = location)) +
theme_bw() +
ggtitle('Motor vehicle emissions - Baltimore City vs. LA County \n1999-2008') +
xlab('year') + ylab('PM Emissions (tons)')
dev.off()
uniqeClass = unique(class$SCC[class$EI.Sector %in% motor])
uniqeClass = unique(class$SCC[class$EI.Sector %in% motor])
rm(list=ls())
data <- readRDS("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Data Folder/summarySCC_PM25.rds")
class <- readRDS("C:/Users/roek0_000/Dropbox/Coursera/John Hopkins University/Data Folder/Source_Classification_Code.rds")
motor = c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
motor <. c('Mobile - On-Road Gasoline Light Duty Vehicles',
motor <- c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
motor = c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
motor <- c('Mobile - On-Road Gasoline Light Duty Vehicles',
'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles',
'Mobile - On-Road Diesel Heavy Duty Vehicles')
uniqueClass = unique(class$SCC[class$EI.Sector %in% motor])
motorData = data[data$SCC %in% uni & data$fips %in% c('24510', '06037'), ]
motorData = data[data$SCC %in% uniqueClass & data$fips %in% c('24510', '06037'), ]
totals = motorData %.%
group_by(year, fips) %.%
summarize(emissions = sum(Emissions))
totals = motorData %>%
group_by(year, fips) %>%
summarize(emissions = sum(Emissions))
totals$location = ifelse(totals$fips == '24510', 'Baltimore City', 'LA County')
# create png
png(filename = 'plot6.png', width=800, height = 600)
# create plot
ggplot(totals, aes(x = factor(year), y = emissions, fill = location)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_smooth(method = 'lm', se = FALSE, aes(group = location, color = location)) +
theme_bw() +
ggtitle('Motor vehicle emissions - Baltimore City vs. LA County \n1999-2008') +
xlab('year') + ylab('PM Emissions (tons)')
dev.off()
engine <- c('Mobile - On-Road Gasoline Light Duty Vehicles', 'Mobile - On-Road Gasoline Heavy Duty Vehicles',
'Mobile - On-Road Diesel Light Duty Vehicles', 'Mobile - On-Road Diesel Heavy Duty Vehicles')
# get SCC numbers for motor sources
uniqueClass = unique(class$SCC[class$EI.Sector %in% motor])
# filter data to only include motor vehicle sources in Baltimore City and LA
engineData = data[data$SCC %in% uniqueClass & data$fips %in% c('24510', '06037'), ]
# get cumulative sum of motor vehicle emissions by year and fips
totals = engineData %>%  group_by(year, fips) %>% summarize(emissions = sum(Emissions))
# create label
totals$location = ifelse(totals$fips == '24510', 'Baltimore City', 'LA County')
# create plot
png(filename = 'plot6.png', width=800, height = 600)
ggplot(totals, aes(x = factor(year), y = emissions, fill = location)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_smooth(method = 'lm', se = FALSE, aes(group = location, color = location)) +
ggtitle('Baltimore City vs. LA County \n1999-2008') +
xlab('year') + ylab('PM Emissions (tons)')
dev.off()
png(filename = 'plot6.png', width=800, height = 600)
ggplot(totals, aes(x = factor(year), y = emissions, fill = location)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle('Baltimore City vs. LA County \n1999-2008') +
xlab('year') + ylab('PM Emissions (tons)')
dev.off()
